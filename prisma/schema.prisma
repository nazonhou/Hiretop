// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String           @unique
  password        String
  name            String
  address         String?
  birthday        DateTime?
  phoneNumber     String?          @unique @map("phone_number")
  rolesUser       RoleUser[]
  companyUser     CompanyUser?
  skills          Skill[]          @relation("UserSkills")
  skillsCreated   Skill[]          @relation("SkillAuthor")
  workExperiences WorkExperience[]
  JobOffer        JobOffer[]

  @@map("users")
}

enum Role {
  ADMIN
  COMPANY
}

model RoleUser {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Uuid
  role   Role

  @@unique([userId, role])
  @@map("role_user")
}

enum CompanyCategory {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

model Company {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String           @unique
  presentation      String?
  history           String?
  culture           String?
  values            String[]
  companyUsers      CompanyUser[]
  workerExperiences WorkExperience[]
  category          CompanyCategory?
  jobOffers         JobOffer[]

  @@map("companies")
}

model CompanyUser {
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.Uuid
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @map("user_id") @db.Uuid

  @@unique([companyId, userId])
  @@map("company_user")
}

model Skill {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique
  users     User[]     @relation("UserSkills")
  author    User       @relation("SkillAuthor", fields: [authorId], references: [id])
  authorId  String     @map("author_id") @db.Uuid
  jobOffers JobOffer[]

  @@map("skills")
}

enum JobType {
  FULL_TIME
  PART_TIME
  SELF_EMPLOYED
  FREELANCE
  FIXED_TERM
  INTERNSHIP
  WORK_STUDY
  SEASONAL
}

enum LocationType {
  ON_SITE
  HYBRID
  REMOTE
}

model WorkExperience {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  type         JobType?
  location     String?
  locationType LocationType? @map("location_type")
  description  String?
  startedAt    DateTime      @map("started_at")
  endedAt      DateTime?     @map("ended_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id") @db.Uuid
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String        @map("company_id") @db.Uuid

  @@map("work_experiences")
}

model JobOffer {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         JobType?
  locationType LocationType? @map("location_type")
  skills       Skill[]
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String        @map("company_id") @db.Uuid
  postedAt     DateTime      @map("posted_at")
  expiredAt    DateTime      @map("expired_at")
  author       User          @relation(fields: [authorId], references: [id])
  authorId     String        @map("author_id") @db.Uuid

  @@map("job_offers")
}
